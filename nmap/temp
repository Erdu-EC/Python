#Esperando finalizacion de los hilos
pool.close()

#Imprimiendo informe
#Ordenando lista de puertos
for host in HOST_VIVOS:
    print(">>>", host)

    tcp_list = sorted(Port.tcp_ready_list[host].items())
    udp_list = sorted(Port.udp_ready_list[host].items())

    open_port = [(port, datos) for port, datos in tcp_list if datos['STATE'] == PortStates.open]
    open_port += [(port, datos) for port, datos in udp_list if datos['STATE'] == PortStates.open]

    print("\tPuertos abiertos:", len(open_port))
    for port in open_port:
        print("\t > %d/%s \t%s \tSondeos: %d \tRTT: %.2f" % (
            port[0], port[1]['TYPE'], PortStates.to_str(port[1]['STATE']), port[1]['SEND'], port[1]['RTT']
        ))

    filtered_port = [{port: datos} for port, datos in tcp_list if datos['STATE'] == PortStates.filtered]
    filtered_port += [{port: datos} for port, datos in udp_list if datos['STATE'] == PortStates.filtered]

    print("\tPuertos filtrados:", len(filtered_port))
    for port in filtered_port:
        print("\t > %d/%s \t%s \tSondeos: %d \tRTT: %.2f" % (
            port[0], port[1]['TYPE'], PortStates.to_str(port[1]['STATE']), port[1]['SEND'], port[1]['RTT']
        ))

    open_filtered_port = [{port: datos} for port, datos in tcp_list if datos['STATE'] == PortStates.open_filtered]
    open_filtered_port += [{port: datos} for port, datos in udp_list if datos['STATE'] == PortStates.open_filtered]

    print("\tPuertos abiertos รณ filtrados:", len(open_filtered_port))
    for port in open_filtered_port:
        print("\t > %d/%s \t%s \tSondeos: %d \tRTT: %.2f" % (
            port[0], port[1]['TYPE'], PortStates.to_str(port[1]['STATE']), port[1]['SEND'], port[1]['RTT']
        ))

    closed_port_tcp = [{port: datos} for port, datos in tcp_list if datos['STATE'] == PortStates.closed]
    closed_port_udp = [{port: datos} for port, datos in udp_list if datos['STATE'] == PortStates.closed]
    closed_port = {}
    closed_port.update(closed_port_tcp)
    closed_port.update(closed_port_udp)

    print("\tPuertos cerrados:", len(closed_port))
    '''for port in closed_port:
        print("\t > %d/%s \t%s \tSondeos: %d \tRTT: %.2f" % (
            port[0], port[1]['TYPE'], PortStates.to_str(port[1]['STATE']), port[1]['SEND'], port[1]['RTT']
        ))'''    

    print("")

#Calculando duracion del sondeo
time_rtt = time() - START_TIME
if time_rtt > 60: time_rtt = str(round(time_rtt / 60, 2)) + " min"
else: time_rtt = str(round(time_rtt, 2)) + " seg"

print("Duracion total:", time_rtt)

#Cerrando socket de envio
Socket_S.close()